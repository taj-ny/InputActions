/*
    Input Actions - Input handler that executes user-defined actions
    Copyright (C) 2024-2025 Marcin Wo≈∫niak

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

#include "TriggerHandler.h"
#include <libinputactions/input/InputEventHandler.h>

namespace libinputactions
{

class InputDevice;

/**
 * Handles triggers of input devices.
 *
 * To restrict what events are accepted, use setDevice and setDeviceTypes.
 */
class InputTriggerHandler
    : public TriggerHandler
    , public InputEventHandler
{
protected:
    /**
     * Constructs a shared handler that handles triggers for all devices. Accepts all events.
     */
    InputTriggerHandler() = default;

    /**
     * Converts this handler into a unique one that handles triggers only for the specified device. It will only accept keyboard key events and events generated
     * by the specified device.
     *
     * Mutually exclusive with setDeviceTypes.
     */
    void setDevice(InputDevice *device);
    /**
     * Converts this handler into a shared one that handles triggers only for the specified device type. It will only accept keyboard key events and events
     * generated by devices of the specified types.
     *
     * Mutually exclusive with setDevice.
     */
    void setDeviceTypes(InputDeviceTypes types);

    bool acceptsEvent(const InputEvent &event) override;
    bool keyboardKey(const KeyboardKeyEvent &event) override;

    /**
     * Nullptr if the handler is shared.
     */
    InputDevice *m_device{};
    InputDeviceTypes m_types;

    friend class TestInputTriggerHandler;
};

}
